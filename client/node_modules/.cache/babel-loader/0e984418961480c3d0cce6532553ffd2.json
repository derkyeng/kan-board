{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Derek\\\\Desktop\\\\kan-board\\\\src\\\\TaskList.js\",\n    _s = $RefreshSig$();\n\nimport Task from \"./Task\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport './TaskList.css';\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst finalSpaceCharacters = [{\n  id: 'gary',\n  name: 'Gary Goodspeed',\n  thumb: '/images/gary.png'\n}, {\n  id: 'cato',\n  name: 'Little Cato',\n  thumb: '/images/cato.png'\n}, {\n  id: 'kvn',\n  name: 'KVN',\n  thumb: '/images/kvn.png'\n}, {\n  id: 'mooncake',\n  name: 'Mooncake',\n  thumb: '/images/mooncake.png'\n}, {\n  id: 'quinn',\n  name: 'Quinn Ergon',\n  thumb: '/images/quinn.png'\n}];\n\nconst TaskList = ({\n  data,\n  title\n}) => {\n  _s();\n\n  const [characters, updateCharacters] = useState(finalSpaceCharacters);\n\n  function handleOnDragEnd(result) {\n    if (!result.destination) return;\n    const items = Array.from(characters);\n    const [reorderedItem] = items.splice(result.source.index, 1);\n    items.splice(result.destination.index, 0, reorderedItem);\n    updateCharacters(items);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"task-list\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      id: \"title\",\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this), \"\\\\\", /*#__PURE__*/_jsxDEV(DragDropContext, {\n      onDragEnd: handleOnDragEnd,\n      children: /*#__PURE__*/_jsxDEV(Droppable, {\n        droppableId: \"characters\",\n        children: provided => /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"characters\",\n          ...provided.droppableProps,\n          ref: provided.innerRef,\n          children: [data.map(({\n            id,\n            name,\n            thumb\n          }, index) => {\n            return /*#__PURE__*/_jsxDEV(Draggable, {\n              draggableId: id,\n              index: index,\n              children: provided => /*#__PURE__*/_jsxDEV(\"li\", {\n                ref: provided.innerRef,\n                ...provided.draggableProps,\n                ...provided.dragHandleProps,\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"characters-thumb\",\n                  children: /*#__PURE__*/_jsxDEV(\"img\", {\n                    src: thumb,\n                    alt: `${name} Thumb`\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 59,\n                    columnNumber: 29\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 58,\n                  columnNumber: 27\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 61,\n                  columnNumber: 27\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 57,\n                columnNumber: 25\n              }, this)\n            }, id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 55,\n              columnNumber: 21\n            }, this);\n          }), provided.placeholder]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 9\n  }, this);\n};\n\n_s(TaskList, \"3ryvh8y07JqnTCXYyN9CPsDJJ2w=\");\n\n_c = TaskList;\nexport default TaskList;\n\nvar _c;\n\n$RefreshReg$(_c, \"TaskList\");","map":{"version":3,"sources":["C:/Users/Derek/Desktop/kan-board/src/TaskList.js"],"names":["Task","DragDropContext","Droppable","Draggable","useState","finalSpaceCharacters","id","name","thumb","TaskList","data","title","characters","updateCharacters","handleOnDragEnd","result","destination","items","Array","from","reorderedItem","splice","source","index","provided","droppableProps","innerRef","map","draggableProps","dragHandleProps","placeholder"],"mappings":"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","sourcesContent":["import Task from \"./Task\";\r\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\r\nimport './TaskList.css';\r\nimport { useState } from \"react\";\r\n\r\nconst finalSpaceCharacters = [\r\n    {\r\n      id: 'gary',\r\n      name: 'Gary Goodspeed',\r\n      thumb: '/images/gary.png'\r\n    },\r\n    {\r\n      id: 'cato',\r\n      name: 'Little Cato',\r\n      thumb: '/images/cato.png'\r\n    },\r\n    {\r\n      id: 'kvn',\r\n      name: 'KVN',\r\n      thumb: '/images/kvn.png'\r\n    },\r\n    {\r\n      id: 'mooncake',\r\n      name: 'Mooncake',\r\n      thumb: '/images/mooncake.png'\r\n    },\r\n    {\r\n      id: 'quinn',\r\n      name: 'Quinn Ergon',\r\n      thumb: '/images/quinn.png'\r\n    }\r\n  ]\r\n\r\nconst TaskList = ({ data, title }) => {\r\n    const [characters, updateCharacters] = useState(finalSpaceCharacters);\r\n\r\n    function handleOnDragEnd(result) {\r\n      if (!result.destination) return;\r\n  \r\n      const items = Array.from(characters);\r\n      const [reorderedItem] = items.splice(result.source.index, 1);\r\n      items.splice(result.destination.index, 0, reorderedItem);\r\n  \r\n      updateCharacters(items);\r\n    }\r\n    return (\r\n        <div className=\"task-list\">\r\n            <h2 id=\"title\">{ title }</h2>\\\r\n            <DragDropContext onDragEnd={handleOnDragEnd}>\r\n            <Droppable droppableId=\"characters\">\r\n            {(provided) => (\r\n              <ul className=\"characters\" {...provided.droppableProps} ref={provided.innerRef}>\r\n                {data.map(({id, name, thumb}, index) => {\r\n                  return (\r\n                    <Draggable key={id} draggableId={id} index={index}>\r\n                      {(provided) => (\r\n                        <li ref={provided.innerRef} {...provided.draggableProps} {...provided.dragHandleProps}>\r\n                          <div className=\"characters-thumb\">\r\n                            <img src={thumb} alt={`${name} Thumb`} />\r\n                          </div>\r\n                          <p>\r\n                            { name }\r\n                          </p>\r\n                        </li>\r\n                      )}\r\n                    </Draggable>\r\n                  );\r\n                })}\r\n                {provided.placeholder}\r\n              </ul>\r\n            )}\r\n          </Droppable>\r\n        </DragDropContext>\r\n        </div>\r\n    );\r\n}\r\n \r\nexport default TaskList;\r\n"]},"metadata":{},"sourceType":"module"}