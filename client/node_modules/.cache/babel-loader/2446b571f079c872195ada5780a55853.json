{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Derek\\\\Desktop\\\\kan-board\\\\src\\\\Board.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport './Board.css';\nimport TaskList from './TaskList';\nimport uuid from \"uuid/v4\";\nimport { DragDropContext } from \"react-beautiful-dnd\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst onDragEnd = (result, columns, setColumns) => {\n  if (!result.destination) return;\n  const {\n    source,\n    destination\n  } = result;\n\n  if (source.droppableId !== destination.droppableId) {\n    const sourceColumn = columns[source.droppableId];\n    const destColumn = columns[destination.droppableId];\n    const sourceItems = [...sourceColumn.items];\n    const destItems = [...destColumn.items];\n    const [removed] = sourceItems.splice(source.index, 1);\n    destItems.splice(destination.index, 0, removed);\n    setColumns({ ...columns,\n      [source.droppableId]: { ...sourceColumn,\n        items: sourceItems\n      },\n      [destination.droppableId]: { ...destColumn,\n        items: destItems\n      }\n    });\n  } else {\n    const column = columns[source.droppableId];\n    const copiedItems = [...column.items];\n    const [removed] = copiedItems.splice(source.index, 1);\n    copiedItems.splice(destination.index, 0, removed);\n    setColumns({ ...columns,\n      [source.droppableId]: { ...column,\n        items: copiedItems\n      }\n    });\n  }\n\n  console.log(columns);\n};\n\nconst Board = ({\n  newTask,\n  lists\n}) => {\n  _s();\n\n  const [columns, setColumns] = useState(lists);\n  const [visual, setVisual] = useState(columns);\n  const [task, setTask] = useState({\n    id: 0\n  });\n\n  if (newTask !== task) {\n    console.log(\"NEW TASK\");\n    setTask(newTask);\n  }\n\n  useEffect(() => {\n    console.log(\"Added Task\");\n    fetch(\"/add\", {\n      method: \"POST\",\n      headers: {\n        'content-type': 'application/json'\n      },\n      body: JSON.stringify(task)\n    }).then(result => result.json()).then(info => {\n      console.log(info);\n    });\n  }, [task]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board\",\n    children: /*#__PURE__*/_jsxDEV(DragDropContext, {\n      onDragEnd: result => onDragEnd(result, columns, setColumns),\n      children: Object.entries(columns).map(([columnId, column], index) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(TaskList, {\n            data: column,\n            id: columnId\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 19\n          }, this)\n        }, columnId, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 17\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Board, \"M36VZJSIlHg+DlZOzBUSj+9cI90=\");\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["C:/Users/Derek/Desktop/kan-board/src/Board.js"],"names":["useEffect","useState","TaskList","uuid","DragDropContext","onDragEnd","result","columns","setColumns","destination","source","droppableId","sourceColumn","destColumn","sourceItems","items","destItems","removed","splice","index","column","copiedItems","console","log","Board","newTask","lists","visual","setVisual","task","setTask","id","fetch","method","headers","body","JSON","stringify","then","json","info","Object","entries","map","columnId"],"mappings":"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","sourcesContent":["import { useEffect, useState } from 'react';\r\nimport './Board.css';\r\nimport TaskList from './TaskList';\r\nimport uuid from \"uuid/v4\";\r\nimport { DragDropContext } from \"react-beautiful-dnd\";\r\n\r\nconst onDragEnd = (result, columns, setColumns) => {\r\n  if (!result.destination) return;\r\n  const { source, destination } = result;\r\n\r\n  if (source.droppableId !== destination.droppableId) {\r\n    const sourceColumn = columns[source.droppableId];\r\n    const destColumn = columns[destination.droppableId];\r\n    const sourceItems = [...sourceColumn.items];\r\n    const destItems = [...destColumn.items];\r\n    const [removed] = sourceItems.splice(source.index, 1);\r\n    destItems.splice(destination.index, 0, removed);\r\n    setColumns({\r\n      ...columns,\r\n      [source.droppableId]: {\r\n        ...sourceColumn,\r\n        items: sourceItems\r\n      },\r\n      [destination.droppableId]: {\r\n        ...destColumn,\r\n        items: destItems\r\n      }\r\n    });\r\n  } else {\r\n    const column = columns[source.droppableId];\r\n    const copiedItems = [...column.items];\r\n    const [removed] = copiedItems.splice(source.index, 1);\r\n    copiedItems.splice(destination.index, 0, removed);\r\n    setColumns({\r\n      ...columns,\r\n      [source.droppableId]: {\r\n        ...column,\r\n        items: copiedItems\r\n      }\r\n    });\r\n  }\r\n  console.log(columns)\r\n};\r\n\r\nconst Board = ({ newTask, lists }) => {\r\n    const [columns, setColumns] = useState(lists);\r\n    const [visual, setVisual] = useState(columns);\r\n    const [task, setTask] = useState({id: 0});\r\n\r\n    if (newTask !== task){\r\n      console.log(\"NEW TASK\")\r\n      setTask(newTask);\r\n    }\r\n\r\n    useEffect(() => {\r\n      console.log(\"Added Task\")\r\n      fetch(\"/add\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          'content-type': 'application/json'\r\n        },\r\n        body: JSON.stringify(task)\r\n      })\r\n      .then((result) => result.json())\r\n      .then((info) => {console.log(info);})\r\n    }, [task]);\r\n\r\n\r\n    return (\r\n        <div className=\"board\">\r\n          <DragDropContext onDragEnd={result => onDragEnd(result, columns, setColumns)}>\r\n            {Object.entries(columns).map(([columnId, column], index) => {\r\n              return (\r\n                <div key={columnId}>\r\n                  <TaskList data={ column } id={ columnId }/>\r\n                </div>\r\n              )\r\n            })}\r\n          </DragDropContext>\r\n        </div>\r\n    );\r\n}\r\n \r\nexport default Board;"]},"metadata":{},"sourceType":"module"}