{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Derek\\\\Desktop\\\\kan-board\\\\src\\\\Board.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport './Board.css';\nimport TaskList from './TaskList';\nimport uuid from \"uuid/v4\";\nimport { DragDropContext } from \"react-beautiful-dnd\"; // let itemsFromBackend = [\n//   { id: uuid(), title: \"First task\", description: \"First Desc\" },\n//   { id: uuid(), title: \"Second task\", description: \"Second Desc\"  },\n//   { id: uuid(), title: \"Third task\", description: \"Third Desc\"  },\n//   { id: uuid(), title: \"Fourth task\", description: \"Fourth Desc\"  },\n//   { id: uuid(), title: \"Fifth task\", description: \"Fifth Desc\"  }\n// ];\n// let columnsFromBackend = {\n//  [uuid()]: {\n//     name: \"Requested\",\n//     items: itemsFromBackend\n//   },\n//   [uuid()]: {\n//     name: \"To do\",\n//     items: []\n//   },\n//   [uuid()]: {\n//     name: \"In Progress\",\n//     items: []\n//   },\n//   [uuid()]: {\n//     name: \"In Progress\",\n//     items: []\n//   },\n//   [uuid()]: {\n//     name: \"In Progress\",\n//     items: []\n//   },\n//   [uuid()]: {\n//     name: \"In Progress\",\n//     items: []\n//   },\n//   [uuid()]: {\n//     name: \"In Progress\",\n//     items: []\n//   }, \n//   [uuid()]: {\n//     name: \"In Progress\",\n//     items: []\n//   },\n//   [uuid()]: {\n//     name: \"In Progress\",\n//     items: []\n//   },\n// };\n// const onDragEnd = (result, columns, setColumns) => {\n//   if (!result.destination) return;\n//   const { source, destination } = result;\n//   if (source.droppableId !== destination.droppableId) {\n//     const sourceColumn = columns[source.droppableId];\n//     const destColumn = columns[destination.droppableId];\n//     const sourceItems = [...sourceColumn.items];\n//     const destItems = [...destColumn.items];\n//     const [removed] = sourceItems.splice(source.index, 1);\n//     destItems.splice(destination.index, 0, removed);\n//     setColumns({\n//       ...columns,\n//       [source.droppableId]: {\n//         ...sourceColumn,\n//         items: sourceItems\n//       },\n//       [destination.droppableId]: {\n//         ...destColumn,\n//         items: destItems\n//       }\n//     });\n//   } else {\n//     const column = columns[source.droppableId];\n//     const copiedItems = [...column.items];\n//     const [removed] = copiedItems.splice(source.index, 1);\n//     copiedItems.splice(destination.index, 0, removed);\n//     setColumns({\n//       ...columns,\n//       [source.droppableId]: {\n//         ...column,\n//         items: copiedItems\n//       }\n//     });\n//   }\n// };\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Board = ({\n  newTask,\n  lists,\n  tasks\n}) => {\n  _s();\n\n  console.log(lists, tasks);\n  const columnsFromBackend = lists;\n  const itemsFromBackend = tasks;\n  const [columns, setColumns] = useState(columnsFromBackend); // let previousTask = itemsFromBackend.some( item => item['id'] === newTask.id)\n  // if (!previousTask && newTask.id !== 0){\n  //   itemsFromBackend.push(newTask)\n  // }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board\",\n    children: /*#__PURE__*/_jsxDEV(DragDropContext\n    /*onDragEnd={result => onDragEnd(result, columns, setColumns)}*/\n    , {\n      children: Object.entries(columns).map(([columnId, column], index) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(TaskList, {\n            data: column,\n            id: columnId\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 19\n          }, this)\n        }, columnId, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 17\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Board, \"bYCmdCIiWWb+ZDQE6HV7NzBHfWY=\");\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["C:/Users/Derek/Desktop/kan-board/src/Board.js"],"names":["useState","TaskList","uuid","DragDropContext","Board","newTask","lists","tasks","console","log","columnsFromBackend","itemsFromBackend","columns","setColumns","Object","entries","map","columnId","column","index"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAO,aAAP;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,IAAP,MAAiB,SAAjB;AACA,SAASC,eAAT,QAAgC,qBAAhC,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAEA,MAAMC,KAAK,GAAG,CAAC;AAAEC,EAAAA,OAAF;AAAWC,EAAAA,KAAX;AAAkBC,EAAAA;AAAlB,CAAD,KAA+B;AAAA;;AACzCC,EAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ,EAAmBC,KAAnB;AAEA,QAAMG,kBAAkB,GAAGJ,KAA3B;AACA,QAAMK,gBAAgB,GAAGJ,KAAzB;AAEA,QAAM,CAACK,OAAD,EAAUC,UAAV,IAAwBb,QAAQ,CAACU,kBAAD,CAAtC,CANyC,CAOzC;AACA;AACA;AACA;;AAEA,sBACI;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA,2BACE,QAAC;AAAgB;AAAjB;AAAA,gBACGI,MAAM,CAACC,OAAP,CAAeH,OAAf,EAAwBI,GAAxB,CAA4B,CAAC,CAACC,QAAD,EAAWC,MAAX,CAAD,EAAqBC,KAArB,KAA+B;AAC1D,4BACE;AAAA,iCACE,QAAC,QAAD;AAAU,YAAA,IAAI,EAAGD,MAAjB;AAA0B,YAAA,EAAE,EAAGD;AAA/B;AAAA;AAAA;AAAA;AAAA;AADF,WAAUA,QAAV;AAAA;AAAA;AAAA;AAAA,gBADF;AAKD,OANA;AADH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADJ;AAaH,CAzBD;;GAAMb,K;;KAAAA,K;AA2BN,eAAeA,KAAf","sourcesContent":["import { useState } from 'react';\r\nimport './Board.css';\r\nimport TaskList from './TaskList';\r\nimport uuid from \"uuid/v4\";\r\nimport { DragDropContext } from \"react-beautiful-dnd\";\r\n\r\n// let itemsFromBackend = [\r\n//   { id: uuid(), title: \"First task\", description: \"First Desc\" },\r\n//   { id: uuid(), title: \"Second task\", description: \"Second Desc\"  },\r\n//   { id: uuid(), title: \"Third task\", description: \"Third Desc\"  },\r\n//   { id: uuid(), title: \"Fourth task\", description: \"Fourth Desc\"  },\r\n//   { id: uuid(), title: \"Fifth task\", description: \"Fifth Desc\"  }\r\n// ];\r\n\r\n\r\n// let columnsFromBackend = {\r\n//  [uuid()]: {\r\n//     name: \"Requested\",\r\n//     items: itemsFromBackend\r\n//   },\r\n//   [uuid()]: {\r\n//     name: \"To do\",\r\n//     items: []\r\n//   },\r\n//   [uuid()]: {\r\n//     name: \"In Progress\",\r\n//     items: []\r\n//   },\r\n//   [uuid()]: {\r\n//     name: \"In Progress\",\r\n//     items: []\r\n//   },\r\n//   [uuid()]: {\r\n//     name: \"In Progress\",\r\n//     items: []\r\n//   },\r\n//   [uuid()]: {\r\n//     name: \"In Progress\",\r\n//     items: []\r\n//   },\r\n//   [uuid()]: {\r\n//     name: \"In Progress\",\r\n//     items: []\r\n//   }, \r\n//   [uuid()]: {\r\n//     name: \"In Progress\",\r\n//     items: []\r\n//   },\r\n//   [uuid()]: {\r\n//     name: \"In Progress\",\r\n//     items: []\r\n//   },\r\n// };\r\n\r\n// const onDragEnd = (result, columns, setColumns) => {\r\n//   if (!result.destination) return;\r\n//   const { source, destination } = result;\r\n\r\n//   if (source.droppableId !== destination.droppableId) {\r\n//     const sourceColumn = columns[source.droppableId];\r\n//     const destColumn = columns[destination.droppableId];\r\n//     const sourceItems = [...sourceColumn.items];\r\n//     const destItems = [...destColumn.items];\r\n//     const [removed] = sourceItems.splice(source.index, 1);\r\n//     destItems.splice(destination.index, 0, removed);\r\n//     setColumns({\r\n//       ...columns,\r\n//       [source.droppableId]: {\r\n//         ...sourceColumn,\r\n//         items: sourceItems\r\n//       },\r\n//       [destination.droppableId]: {\r\n//         ...destColumn,\r\n//         items: destItems\r\n//       }\r\n//     });\r\n//   } else {\r\n//     const column = columns[source.droppableId];\r\n//     const copiedItems = [...column.items];\r\n//     const [removed] = copiedItems.splice(source.index, 1);\r\n//     copiedItems.splice(destination.index, 0, removed);\r\n//     setColumns({\r\n//       ...columns,\r\n//       [source.droppableId]: {\r\n//         ...column,\r\n//         items: copiedItems\r\n//       }\r\n//     });\r\n//   }\r\n// };\r\n\r\nconst Board = ({ newTask, lists, tasks }) => {\r\n    console.log(lists, tasks);\r\n\r\n    const columnsFromBackend = lists;\r\n    const itemsFromBackend = tasks;\r\n\r\n    const [columns, setColumns] = useState(columnsFromBackend);\r\n    // let previousTask = itemsFromBackend.some( item => item['id'] === newTask.id)\r\n    // if (!previousTask && newTask.id !== 0){\r\n    //   itemsFromBackend.push(newTask)\r\n    // }\r\n\r\n    return (\r\n        <div className=\"board\">\r\n          <DragDropContext /*onDragEnd={result => onDragEnd(result, columns, setColumns)}*/>\r\n            {Object.entries(columns).map(([columnId, column], index) => {\r\n              return (\r\n                <div key={columnId}>\r\n                  <TaskList data={ column } id={ columnId }/>\r\n                </div>\r\n              )\r\n            })}\r\n          </DragDropContext>\r\n        </div>\r\n    );\r\n}\r\n \r\nexport default Board;"]},"metadata":{},"sourceType":"module"}